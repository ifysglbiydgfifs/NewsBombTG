from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, ConversationHandler,
    MessageHandler, filters, ContextTypes
)
from sqlalchemy.orm import Session
from models import engine, User, UserChannel
from parser_init import parse
from datetime import datetime

START_DATE, END_DATE, ADD_CHANNEL = range(3)
session = Session(engine)

# –°—Ç–∞—Ä—Ç –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    telegram_id = user.id
    username = user.username or ""

    existing_user = session.query(User).filter_by(telegram_id=telegram_id).first()
    if not existing_user:
        new_user = User(telegram_id=telegram_id, username=username, credits=0)
        session.add(new_user)
        session.commit()

    keyboard = [
        [KeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥")],
        [KeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã")],
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")],
        [KeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")],
        [KeyboardButton("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥":
        user_id = update.effective_user.id
        db_user = session.query(User).filter_by(telegram_id=user_id).first()
        favorites = session.query(UserChannel).filter_by(user_id=db_user.id).all()
        if not favorites:
            await update.message.reply_text("‚ùó –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
            return ConversationHandler.END
        context.user_data['favorites'] = favorites
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):")
        return START_DATE

    elif text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã":
        user_id = update.effective_user.id
        db_user = session.query(User).filter_by(telegram_id=user_id).first()
        favorites = session.query(UserChannel).filter_by(user_id=db_user.id).all()
        if not favorites:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        else:
            msg = "\n".join([f"üîπ {ch.channel_url}" for ch in favorites])
            await update.message.reply_text(f"–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n{msg}")

    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ":
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:")
        return ADD_CHANNEL

    elif text == "üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ":
        await update.message.reply_text(
            "–û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å", url="https://news-bomb-production.up.railway.app/")]
            ])
        )

    elif text == "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
        await update.message.reply_text("üõ† –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
async def get_start_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['start_date'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Ü–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):")
    return END_DATE


# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∫–æ–Ω—Ü–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥
async def get_end_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        start_date = datetime.strptime(context.user_data['start_date'], '%Y-%m-%d')
        end_date = datetime.strptime(update.message.text, '%Y-%m-%d')
        favorites = context.user_data['favorites']

        for fav in favorites:
            link = fav.channel_url
            channel_name = link.split("/")[-1]
            parse(link, start_date, end_date, channel_name)

        await update.message.reply_text(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    return ConversationHandler.END


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
async def add_to_favorites(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text.strip()
    user_id = update.effective_user.id
    db_user = session.query(User).filter_by(telegram_id=user_id).first()

    existing = session.query(UserChannel).filter_by(user_id=db_user.id, channel_url=url).first()
    if existing:
        await update.message.reply_text("üîÅ –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.")
    else:
        try:
            new_channel = UserChannel(user_id=db_user.id, channel_url=url)
            session.add(new_channel)
            session.commit()
            await update.message.reply_text("‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")
    return ConversationHandler.END


# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


def main():
    app = Application.builder().token("7735571468:AAFlFNzK9K68hpkafy3e_GzHpYqqzzk722U").build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler)],
        states={
            START_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_start_date)],
            END_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_end_date)],
            ADD_CHANNEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_to_favorites)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    app.run_polling()


if __name__ == '__main__':
    main()
